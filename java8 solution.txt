package day1;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

/**
 *
 
 */
public class Employee
{
    int id;
     
    String name;
     
    int age;
     
    String gender;
     
    String department;
     
    int yearOfJoining;
     
    double salary;
     
    public Employee(int id, String name, int age, String gender, String department, int yearOfJoining, double salary)
    {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.department = department;
        this.yearOfJoining = yearOfJoining;
        this.salary = salary;
    }
     
    public int getId()
    {
        return id;
    }
     
    public String getName()
    {
        return name;
    }
     
    public int getAge()
    {
        return age;
    }
     
    public String getGender()
    {
        return gender;
    }
     
    public String getDepartment()
    {
        return department;
    }
     
    public int getYearOfJoining()
    {
        return yearOfJoining;
    }
     
    public double getSalary()
    {
        return salary;
    }
     
    @Override
    public String toString()
    {
        return "Id : "+id
                +", Name : "+name
                +", age : "+age
                +", Gender : "+gender
                +", Department : "+department
                +", Year Of Joining : "+yearOfJoining
                +", Salary : "+salary;
    }
    public static void main(String[] arg)
    {
        List<Employee> employeeList = new ArrayList<Employee>();
         
employeeList.add(new Employee(111, "Jiya Brein", 32, "Female", "CS", 2011, 25000.0));
employeeList.add(new Employee(122, "Paul Niksui", 25, "Male", "Mechnical", 2017, 13500.0));

//How many male and female employees are there in the organization?
Map<String, Long> noOfMaleAndFemaleEmployees=
employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));
         
System.out.println(noOfMaleAndFemaleEmployees);
System.out.println("***************************************");
//Find out*******************"); average age of male and female employees?
Map<String, Double> avgAgeOfMaleAndFemaleEmployees=
employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingInt(Employee::getAge)));
         
System.out.println(avgAgeOfMaleAndFemaleEmployees);
System.out.println("***************************************");
//Find the highest paid employee in this employee class?
Optional<Employee> highestPaidEmployeeWrapper=
employeeList.stream().collect(Collectors.maxBy(Comparator.comparingDouble(Employee::getSalary)));
         
Employee highestPaidEmployee = highestPaidEmployeeWrapper.get();
         
System.out.println("Details Of Highest Paid Employee : ");
         
System.out.println("==================================");
         
System.out.println("ID : "+highestPaidEmployee.getId());
         
System.out.println("Name : "+highestPaidEmployee.getName());
         
System.out.println("Age : "+highestPaidEmployee.getAge());
         
System.out.println("Gender : "+highestPaidEmployee.getGender());
         
System.out.println("Department : "+highestPaidEmployee.getDepartment());
         
System.out.println("Year Of Joining : "+highestPaidEmployee.getYearOfJoining());
         
System.out.println("Salary : "+highestPaidEmployee.getSalary());
System.out.println("***************************************");
//List all the names of employees who have joined after 2016?
employeeList.stream()
            .filter(e -> e.getYearOfJoining() > 2016)
            .map(Employee::getName)
            .forEach(System.out::println);
System.out.println("***************************************");
//Find out most senior employee in this emp class?
Optional<Employee> seniorMostEmployeeWrapper=
employeeList.stream().sorted(Comparator.comparingInt(Employee::getYearOfJoining)).findFirst();
         
Employee seniorMostEmployee = seniorMostEmployeeWrapper.get();
         
System.out.println("Senior Most Employee Details :");
         
System.out.println("----------------------------");
         
System.out.println("ID : "+seniorMostEmployee.getId());
         
System.out.println("Name : "+seniorMostEmployee.getName());
         
System.out.println("Age : "+seniorMostEmployee.getAge());
         
System.out.println("Gender : "+seniorMostEmployee.getGender());
         
System.out.println("Age : "+seniorMostEmployee.getDepartment());
         
System.out.println("Year Of Joinging : "+seniorMostEmployee.getYearOfJoining());
         
System.out.println("Salary : "+seniorMostEmployee.getSalary());
System.out.println("***************************************");
//Count the number of employees in each dept?
Map<String, Long> employeeCountByDepartment=
employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.counting()));
         
Set<Entry<String, Long>> entrySet = employeeCountByDepartment.entrySet();
         
for (Entry<String, Long> entry : entrySet)
{
    System.out.println(entry.getKey()+" : "+entry.getValue());
}
System.out.println("***************************************");
//Find male and female employees are there in the CS dept and Mechanical dept?
Map<String, Long> countMaleFemaleEmployeesInSalesMarketing=
employeeList.stream()
            .filter(e -> e.getDepartment()=="CS" || e.getDepartment()=="Mechnical")
            .collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));
 
System.out.println(countMaleFemaleEmployeesInSalesMarketing);
System.out.println("***************************************");
//Find the average salary of male and female employees?
Map<String, Double> avgSalary=
employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::getSalary)));
         
Set<Entry<String, Double>> entrySet1 = avgSalary.entrySet();
         
for (Entry<String, Double> entry : entrySet1)
{
    System.out.println(entry.getKey()+" : "+entry.getValue());
   
}
System.out.println("***************************************");
//Differentiate the employess who are younger or equal to 30yrs from those employees who are older than 25 yrs?
Map<Boolean, List<Employee>> partitionEmployeesByAge=
employeeList.stream().collect(Collectors.partitioningBy(e -> e.getAge() > 25 && e.getAge()<=30));
         
Set<Entry<Boolean, List<Employee>>> entrySet11 = partitionEmployeesByAge.entrySet();
         
for (Entry<Boolean, List<Employee>> entry : entrySet11)
{
    System.out.println("----------------------------");
             
    if (entry.getKey())
    {
        System.out.println("Employees older than 25 years :");
    }
    else
    {
        System.out.println("Employees younger than or equal to 30 years :");
    }
             
    System.out.println("----------------------------");
             
    List<Employee> list = entry.getValue();
             
    for (Employee e : list)
    {
        System.out.println(e.getName());
    }
}
//List down the names of all employees in each dept?
Map<String, List<Employee>> employeeListByDepartment=
employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment));
         
Set<Entry<String, List<Employee>>> entrySet3 = employeeListByDepartment.entrySet();
         
for (Entry<String, List<Employee>> entry : entrySet3)
{
    System.out.println("--------------------------------------");
             
    System.out.println("Employees In "+entry.getKey() + " : ");
             
    System.out.println("--------------------------------------");
             
    List<Employee> list = entry.getValue();
             
    for (Employee e : list)
    {
        System.out.println(e.getName());
    }
}

    }
}
